Estructuras de Datos Jerarquicas:

* ARBOLES *:
Estructuras no lineales que representan entidades que están relacionadas jerárquicamente. Ej.: árbol genealógico, organigrama, sistema de archivos.

Dado cualquier nodo puedo tener varios sucesores, pero siempre un solo predecesor. Excepciones: el primer nodo (raíz) que no tiene predecesor, solo un conjunto de sucesores y los nodos finales que tienen siempre un nodo predecesor pero no sucesores.

--Si un objeto puede tener varios predecesores entonces NO es representable mediante árboles.--

Normalmente en un árbol del padre puedo ir a los hijos, pero no viceversa.

Nodos sin hijos: nodos hoja o nodos terminales.
Padres, hijos, hermanos.

Usos:
- Representación de fórmulas algebráicas.
- SIstemas de archivos
- Organizar objetos de manera que su búsqueda sea eficiente.
- Algoritmos de cifrado.
- Procesamiento de texto.

Un árbol es:
1- Una estructura de datos vacía.
2- O bien un conjunto de uno o más nodos tales que:
	2.1 Hay un nodo especial, denominado raíz (n1).
	2.2 Los nodos restantes se dividen en k >= 0 conjuntos disjuntos, tal que cada uno de estos es un árbol con raíces n1 .. nk. Enronces podemos construir un nuevo árbol que tiene a n como raíz y donde n1 ... nk son hijos de la raíz (n).

	
Propiedades de los nodos:
* Nodos adyacenetes: Nodos que están conectados por un arco.

* Camino entre dos nodos: Si n1, ..., nk es una secuencia de nodos tales que ni es padre de ni+1 para i = 1 ... k - 1, entonces decimos que esta secuencia de nodos es un camino (path).

* Longitud de camino: Número de arcos que contiene un camino. También, el nro de nodos del camino -1.

* Descendientes y antecesores: Si existe un camino que va del nodo a al b, entonces a es antecesor de b y b es descendiente de a.

* Altura: Máxima longitud de un camino que va desde el nodo a una hoja.

* Nivel/Profundidad: Distancia al nodo raíz. El raíz tiene una distancia cero de sí misma, por ello se dice que el raíz está en el nivel 0. Los hijos del nodo raíz están en el nivel 1, sus hijos están en el nivel 2 y así sucesivamente. Longitud del único camino que va desde el nodo a la raíz.

**SUB ÁRBOLES**
- Cualquier estructura conectada por dejabo de la raíz: cada nodo de un árbol es la raíz de un subárbol.

- EL primer nodo de un subárbol se conoce como el raíz del subárbol y se utiliza para nombrar el subárbol.

- Sub árbol completo: no le falta ningún nodo. No se saca nada al subárbol (se toma de un nodo hacia abajo y hasta llegar al último nodo hoja?).

- Cuando hablamos de subárboles de un nodo N1 ...

Desde un nodo hacia abajo puedo hablar de un subarbol del arbol principal (el nodo y su descendencia). Los nodos hoja también pueden ser subárboles.

NO ES NECESARIO QUE SEA TODO LO QUE VA HACIA ABAJO. Puede recortarse la descendencia, pero debe cumplir con las reglas de árboles. Ejemplo: no puedo armar un subarbol llevando hijos de hijos y no a sus padres porque los nodos quedan inconexos.
 
PREG TIPICAS:
* Un arbol puede tener un nodo que es hoja y raiz.
* Un árbol no puede no tener hojas.
*
...

Propiedades de los Árboles:
* Altura o Profundidad: NIvel de la hoja del camino más largo desde la raíz+1. La altura de un árbol vacío es 0.

* Equilibrio: Dado un número máximo k de hijos de cada nodo y la altura del arbol h, cada nodo de nivel l < (h-2) tiene exactamente k hijos.

*Equilibrio perfecto / Lleno:
	* Dado un numero maximo k de hijos de ada nodo y la altura del arbol h, cada nodo de nivel l < h-1 tiene k hijos.
	* Dado un grado G, contiene G elevado a la n nodos en el nivel n con n >= 0 y n <= altura-1
	* El arbol tiene todos los nodos que puede tener.
	
* Balanceo: si y solo si en cada nodo las alturas de sus subarboles difieren a lo maximo en 1.

* Balanceo perfecto: si y solo si en cada nodo las alturas de sus subarboles son iguales.

* Completo: cada nodo tiene la cant maxima de hijos que puede tener o no tiene ninguno (nodos hoja?).

* Máximo de hijos: 2.

Implementación computacional:
* Arbol princ derecho (el que trabajamos en praáctica): puedo modelar el arbol poniendo los punteros de los padres a los hijos. NO tengo puntero que va hacia arriba. Se ingresa a la raíz.

* Arbol princ izq: los punteros van desde los hijos hacia los padres. Problema: no tengo punto de entrada a la estructura de datos.

Respresentación:
* Grafo.
* Paréntesis anidados / Representación de lista: A(B(C,D),E,F(G,H,I))
* Sangría/Escalonamiento/Identación
-> A
   * B
     - C
     - D
   * E
   * F
     - G
     - H
     - I
* Conjuntos anidados.

**ÁRBOLES BINARIOS**
* Ningun nodo puede tener mas de dos subarboles.
* Cada nodo puede tener cero, uno o dos hijos.
* Se conoce al nodo de la izquierda como hijo izquierdo y el nodo de la derecha como hijo derecho.

Definición recursiva: Cada nodo es el raiz de su propio subarbol y tiene hijos que son raices .......

* Factor de balance: diferencia en la altura entre los subarboles derecho e izquierdo.

Definiciones:
* UN arbol binario esta perf. balanceado si la altura de los subarb de cada nodo no difiere.
* Balanceo
* Arbol completo
* ...

Arbol binario degenerado:
Tienen una sola hoja. Tods los nodos no-hoja tienen un solo hijo.

Recorrer arbol binario:
...

--PRACTICA--

-- EJ 1 - Eliminar nodo de una LDE --
bool eliminarLDE(lde*&lista,int n) {
    lde* actual=lista;
//Buscar el nodo
    while(actual!=NULL && actual->dato!=n) 
    {
       actual=actual->sig;
    }
//Se termino la lista y no se encontró el dato
    if (actual==NULL) 
    { 
       return false;
    }
//Actualizar referencias
    if(actual->ant!=NULL) 
    {
       actual->ant->sig=actual->sig;
    }
else 
    {
       lista=actual->sig;//Si el nodo eliminado es el primero
    }

    if (actual->sig!=NULL) 
    {
       actual->sig->ant=actual->ant;
    }
    delete actual;
    return true;
}

-- Ej 2 - Intercambiar dos nodos en una LSE --

