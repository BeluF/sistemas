A-
struct nodo_lde{
	int ID;
	string nombre_ninio;
	string nombre_tutor;
	int edad;
	double km;
	long int telefono;
	string salita;
	struct nodo_lde* sgte;
	struct nodo_lde* ant;
}
typdef struct nodo_lde NodoLDE;

struct nodo_pila_ve{
	string nombre_ninio;
	string nombre_tutor;
	int edad;
	double km;
	long int telefono;
	struct nodo_pila_ve* link;
}
typedef struct nodo_pila_ve NPVerde;

struct nodo_pila_ne{
	string nombre_ninio;
	string nombre_tutor;
	int edad;
	double km;
	long int telefono;
	struct nodo_pila_ve* link;
}
typedef struct nodo_pila_ne NPNegro;

void add_LDE(NodoLDE* &LDE, string nom1, string nom2, int edad, double km, long int tel);

void remove_stack_verde(NPVerde* &verde);

void remove_stack_negra(NPNegra* &negra);

void isEmptyStack(NPVerde* verde, NPNegra* negra);

bool removeLDE(NodoLDE* &LDE, int ID){
	NodoLDE* aux = LDE;
	NodoLDE* ant = NULL;
	
	while (LDE->sgte != NULL && aux->ID != ID){
	//SI NO LO ENCUENTRA
	if(aux==NULL) return false;
	}
	
	//SI ES EL PRIMER NODO
	if (LDE->ant == NULL){
		LDE=LDE->sgte;
	}
	//Si la lista no queda vacía
	if(LDE != NULL) LDE->ant = NULL;
	
	

	else{
	ant -> sgte = aux->sgte;
	//SI ESTA EN EL MEDIO
	if (aux->sgte != NULL) aux->sgte->ant = ant;
	}
	//SI ES EL ULTIMO
	else ant->sgte = NULL;
	}
	}
	delete aux;
	return true;

}

void distribuir (NodoLDE* &LDE, NPVerde* &verde, NPNegra* &negra){
	NodoLDE* aux = LDE;
	
	if(edad > 2 && edad < 4){
	//SALITA VERDE
	NPVerde* nuevo_verde = new (NPVerde);
	NPVerde* aux_verde = verde;
		
	nuevo_verde->nombre_ninio = aux->nombre_ninio;
	nuevo_verde->nombre_tutor = aux->nombre_tutor;
	nuevo_verde->edad = aux->edad;
	nuevo_verde->km = aux->km;	
	nuevo_verde->telefono = aux->telefono;
	nuevo_verde->link=NULL
	
	if(isEmptyStack){
		verde->link = nuevo_verde;
	}
	
	else{
	while(aux_verde->link != NULL){
		aux_verde = aux_verde->link;
		}
	verde->link = nuevo_verde;
	}
	delete LDE;
	}
	
	else if(edad>=4 && edad<6){
	//SALITA NEGRA
	NPNegro* nuevo_negro = new (NPNegro);
	NPNegro* aux_negro = negro;
		
	nuevo_negro->nombre_ninio = aux->nombre_ninio;
	nuevo_negro->nombre_tutor = aux->nombre_tutor;
	nuevo_negro->edad = aux->edad;
	nuevo_negro->km = aux->km;	
	nuevo_negro->telefono = aux->telefono;
	nuevo_negro->link=NULL
	
	if(isEmptyStack){
		negro->link = nuevo_negro;
	}
	
	else{
	while(aux_negro->link != NULL){
		aux_negro = aux_negro->link;
		}
	negro->link = nuevo_negro;
	}
	delete LDE;
}

else {
	return;
}
}


B-
struct nodo_AB(){
	int dato;
	struct nodo_AB* = der;
	struct nodo_AB* = izq;
};
typedef struct nodo_AB NAB;

struct nodo_pila_e(){
	NAB* = dato [MAX];
	int tamanio;
	int topa;
};
typedef struct nodo_pila_e PilaE;

bool isEmptyStack(PilaE);
void addStack(PilaE& pila, NAB* arbol, int nivel);
void removeStack(PilaE* &pila, NAB* arbol, int altura_actual);

int print(NAB* arbol){
	NAB* aux;
	int max_altura = 0;
	int altura_actual;
	PilaE pila;
	pila.tamanio = MAX;
	pila.tope = 0;
	
	if (arbol == NULL){
		addStack(pila, arbol, 1);
	}
	while (!isEmptyStack(pila)){
		removeStack(pila, aux, altura_actual);
		if(altura_actual>max_altura){
			max_altura = altura_actual;
		}
				cout << "Nivel " << max_altura << ": " << arbol->dato;
		if(aux->der!=NULL){
			addStack(pila, aux->der, altura_actual+1);
		}
		if(aux->izq!=NULL){
			addStack(pila, aux->izq, altura_actual+1);
		}
	return max_altura
	}
}

C-
INORDEN
6 12 15 18 21 24 30 48 54

POSTORDEN
6 15 21 18 12 48 54 30 24

POR NIVELES
24 12 30 6 18 54 15 21 48


D-
Inventar y programar un barrido para un árbol ternario. EL mismo, como todo barrido, debe garantizar "procesar" TODOS los nodos UNA sola vez. Proponga la estructura de datos y desarrole el programa correspondiente (caundo toca el "procesar" solo visualice el contenido del nodo en la pantalla).
Como contenido del nodo utilice un caracter.
Propornga de manera gráfica un ejemplo pequeño de árbol y muestre como sería la salida del programa.

#define MAX = 100;

struct nodo_at{
	char dato;
	struct nodo_at* izq;
	struct nodo_at* medio;
	struct nodo_at* der;
};
typedef struct nodo_at NAT;

struct nodo_pila_e{
	NAT* dato [MAX];
	int tamanio;
	int tope;	
};
typedef struct nodo_pila_e NPE;

void addStack_inorden (NPE* pila, NAT* arbol);

void isEmpy(NPE* pila);

NAT* removeStack(NPE* pila);

void mostrar_preorden (NAT* arbol, NPE* pila){
	NAT* aux;
	if(arbol != NULL){
		addStack_inorden(pila, arbol);
	}
	while(!isEmpty(pila)){
		aux = removeStack(pila);
		cout << aux->dato;
		if(aux->der != NULL){
			addStack_inorden(pila, aux->der);
		}
		if(aux->medio != NULL){
			addStack_inorden(pila, aux->medio);
		}
		if(aux->izq != NULL){
			addStack_inorden(pila, aux->izq);
		}
	}
}

PREORDEN
struct nodo_pila_e{
	NAT* nodo;
	int bandera;	
};
typedef struct nodo_pila_e NPE;

void addStack_preorden (NPE* pila, NAT* arbol, int bandera);

void removeStack(NPE* &pila, NAB* &arbol, int &bandera);

void mostrar_inorden(NAT* arbol, NPE* pila){
	NPE* pila = NULL;
	
	if (arbol != NULL){
		addStack_preorden(pila, arbol, 1);
	}
	while(!isEmpty(pila)){
		removeStack(pila, aux, bandera);
		
		if (bandera == 1){
		            if (aux->der != NULL) addStack_preorden(pila, aux->der, 1);
            		    if (aux->medio != NULL) addStack_preorden(pila, aux->medio, 1);
            		    addStack_preorden(pila, aux, 2); // Volver a procesar después del izq
            		    if (aux->izq != NULL) addStack_preorden(pila, aux->izq, 1);

		}
		else if (bandera == 2) {
            cout << aux->dato << " ";
        }
		
	}
}

POSTORDEN

void mostrar_postorden(NAT* arbol, NPE* pila){
	NPE* pila = NULL;
	NAT* aux;
	int bandera;
	
	if (arbol != NULL){
		addStack_preorden(pila, arbol, 1);
	}
	while(!isEmpty(pila)){
		removeStack(pila, aux, bandera);
		
		if (bandera == 1){
		            if (aux->der != NULL) addStack_preorden(pila, aux->der, 1);
            	 	    if (aux->medio != NULL) addStack_preorden(pila, aux->medio, 1);
            		    if (aux->izq != NULL) addStack_preorden(pila, aux->izq, 1);
            		    addStack_preorden(pila, aux, 2); // Volver a procesar después del izq

		}
		else if (bandera == 2) {
            cout << aux->dato << " ";
        }
		
	}
}









