//COLA CIRCULAR

#include <iostream>
#include <fstream>
#include <stdlib.h>


#define MAX 10


using namespace std;


/*
frente: referencia al primer elemento de la ColaCircular, aqu�l que ser� devuelto. Esto es v�lido SOLO si la cola NO est� VACIA.
fondo: referencia a la pr�xima posici�n a ser ocupada en la pr�xima alta.
llena: true si la cola est� llena, false en caso contrario.
vacia: true si la cola est� vacia, false en caso contrario.
*/
struct cola_circular
{
	int cola [MAX];
	int tamanio;
	int frente;
	int fondo;
	bool llena;
	bool vacia;
	int cantidad_elementos;
};
typedef struct cola_circular ColaCircular;

int alta (ColaCircular &cc, int dato);
int baja (ColaCircular &cc,int &dato);
void mostrar_cc (ColaCircular &cc);


int main (void)
{
	ColaCircular cc_ejemplo;
	cc_ejemplo.tamanio = MAX;
	cc_ejemplo.frente = 0;
	cc_ejemplo.fondo = 0;
	cc_ejemplo.vacia = true;
	cc_ejemplo.llena = false;
	cc_ejemplo.cantidad_elementos = 0;
	
	int contador = 0, retorno = 0;
	int dato;
	
	cout << "------------------------" << endl;
	cout << "Estado de Cola al INICIO" << endl << endl;
	mostrar_cc (cc_ejemplo);
	cout << "------------------------" << endl << endl;
	
	while (!cc_ejemplo.llena)
	{
		if ((retorno = alta (cc_ejemplo, contador++)) == 10)
		{
			cout << "Error " << retorno << ": Intento de alta en ColaCircular llena.";
			break;
		}
		cout << "Elemento dado de alta: " << contador - 1 << endl << endl;
		mostrar_cc (cc_ejemplo);
	}

	cout << "---------------------------------------" << endl;
	cout << "Estado de Cola luego de las INSERCIONES" << endl << endl;
	mostrar_cc (cc_ejemplo);
	cout << "---------------------------------------" << endl << endl;
/*	
	while (!cc_ejemplo.vacia)
	{
		if ((retorno = baja (cc_ejemplo, dato)) == 20)
		{
			cout << "Error " << retorno << ": Intento de baja en ColaCircular vacia.";
			break;
		}
		cout << "Elemento obtenido: " << dato << endl << endl;	
		mostrar_cc (cc_ejemplo);
	}
	cout << "-----------------------------------------------" << endl;
	cout << "Estado de Cola luego de OBTENER todos los datos" << endl << endl;
	mostrar_cc (cc_ejemplo);
	cout << "-----------------------------------------------" << endl << endl;
*/	
	return retorno;
}

int alta (ColaCircular &cc, int dato)
{
	cc.vacia = false;
	
	if (cc.llena)
		return 10;
	
	cc.cola[cc.fondo] = dato;
	cc.cantidad_elementos++;
	
	if (cc.fondo == cc.tamanio -1)
		cc.fondo = 0;
	else
		cc.fondo ++;
	
	if (cc.fondo == cc.frente)
		cc.llena = true;
	
	return 0;
}

int baja (ColaCircular &cc,int &dato)
{

}

void mostrar_cc (ColaCircular &cc)
{
	cout << "OJO! - Esta operacion NO esta permitida para esta estructura de datos.\nSe implementa solo a los fines de poder realizar un control del comportamiento de la EDD.\n";
	for (int i=0; i<=cc.tamanio; i++)
	{
		if ((i == cc.frente) && (i != cc.fondo))
			cout << "Elemento [" << i << "]: " << cc.cola[i] << "<- FRENTE" << endl;
		else if ((i == cc.fondo) && (i != cc.frente))
			cout << "Elemento [" << i << "]: " << cc.cola[i] << "<- FONDO" << endl;
		else if ((i == cc.fondo) && (i == cc.frente))
			cout << "Elemento [" << i << "]: " << cc.cola[i] << "<- FRENTE Y FONDO" << endl;
		else
			cout << "Elemento [" << i << "]: " << cc.cola[i] << endl;
	}
	cout << endl;
	cout << "TAMANIO: " << cc.tamanio << endl;
	cout << "FRENTE: " << cc.frente << endl;
	cout << "FONDO: " << cc.fondo << endl;
	cout << "LLENA: " << cc.llena << endl;
	cout << "VACIA: " << cc.vacia << endl;
	cout << "CANTIDAD DE ELEMENTOS: " << cc.cantidad_elementos << endl;
	
	cout << endl << endl;
}
